<div id='newEvent' class='form-show btn'>Create an Event</div>
<% if @events %>
<div class='list dark'>
  <% @events.each do |event| %>
  <div class='list-item'>
    <p><%= link_to event.title,event,class:'page-link' %></p>
    <p><%= event.location.name %></p>
    <p><%= event.when.strftime("at%l:%M%p") %></p>
    <% if Attendance.find_by(user:current_user,event:event) %>
      <%= link_to 'Bail', bail_event_path(event), :method => :put, class: "btn" %>
    <% else %>
      <%= link_to 'Attend', attend_event_path(event), :method => :put, class: "btn" %>
    <% end %>
    <!-- voting -->
    <% user_vote = "" %>
    <% if current_user.voted_for?event %>
      <% if current_user.voted_up_on?event %>
        <% user_vote='upvoted' %>
        <%= link_to unvote_event_path(event), class:"btn upv #{user_vote}", method: :put do %>
          Upvote
          <%= event.get_upvotes.size %>
        <% end %>
        <%= link_to downvote_event_path(event), class:"btn downv #{user_vote}", method: :put do %>
          Downvote
          <%= event.get_downvotes.size %>
        <% end %>
      <% else %>
        <% user_vote='downvoted' %>
        <%= link_to upvote_event_path(event), class:"btn upv #{user_vote}", method: :put do %>
          Upvote
          <%= event.get_upvotes.size %>
        <% end %>
        <%= link_to unvote_event_path(event), class:"btn downv #{user_vote}", method: :put do %>
          Downvote
          <%= event.get_downvotes.size %>
        <% end %>
      <% end %>
    <% else %>
      <%= link_to upvote_event_path(event), class:"btn upv #{user_vote}", method: :put do %>
        Upvote
        <%= event.get_upvotes.size %>
      <% end %>
      <%= link_to downvote_event_path(event), class:"btn downv #{user_vote}", method: :put do %>
        Downvote
        <%= event.get_downvotes.size %>
      <% end %>
    <% end %>
    <!-- voting -->
  </div>
  <% end %>
</div>
<% end %>
<div id='map' class='map'></div>
<div id='newLocation' class='form-show btn'>Add a Location</div>
<div class="form-container hide">
  <div class='inner-form event-form'>
    <%= render partial: "form" %>
    <a href="#" class='cancel top-right btn'>X</a>
  </div>
  <div class="inner-form location-form">
    <%= render partial: "locations/form" %>
    <a href="#" class='cancel top-right btn'>X</a>
  </div>
</div>

<script>
// form show/hide
var newE = document.getElementById('newEvent');
var newL = document.getElementById('newLocation');
var formC = document.querySelector('.form-container');
var formS = formC.querySelector('input[type=submit]');
var cancel = document.querySelectorAll('.cancel');
newE.addEventListener("click", function(){
  formC.className = 'form-container show'
  formC.querySelector('.event-form').style.display="block";
  formC.querySelector('.location-form').style.display="none";
});
newL.addEventListener("click", function(){
  formC.className = 'form-container show'
  formC.querySelector('.event-form').style.display="none";
  formC.querySelector('.location-form').style.display="block";
});
formS.addEventListener("click",function(){
  formC.className = 'form-container hide';
});
for (var i=0;i<cancel.length;i++){
  cancel[i].addEventListener("click",function(){
    formC.className = 'form-container hide';
  });
}

//map
L.mapbox.accessToken = "pk.eyJ1IjoiY2hhc2VncnViZXIiLCJhIjoidV9tdHNYSSJ9.RRyvDLny4YwDwzPCeOJZrA";
var features = [
  <% @locations.each do |location| %>
  { "type": "Feature",
    "geometry": {"type": "Point", "coordinates": [<%= location.longitude %>, <%= location.latitude %>]},
    "properties": {
      "name":"<%= location.name %>",
      "address":"<%= location.address %>"
    }
  },
<% end %>
]

var geojson = { "type": "FeatureCollection",
    "features":features}

var events = L.geoJson(geojson);

var map = L.mapbox.map('map', 'mapbox.dark',{minZoom:3,maxZoom:18,zoomControl:false})
new L.Control.Zoom({ position: 'topright' }).addTo(map);
map.fitBounds(events.getBounds())

// var clusters = new L.MarkerClusterGroup({
//     iconCreateFunction: function (cluster) {
//         var markers = cluster.getChildCount();
//         return L.divIcon({html: markers, className: 'eventMarker', iconSize:L.point(20,20)})
//     },
//         spiderfyOnMaxZoom: false,
//         showCoverageOnHover: false,
//         spiderLegPolylineOptions: {weight: 0, color:'#fff'},
//         maxClusterRadius:100
//     });

//load and style map data
events.eachLayer(function(pt){
  var marker = L.marker([pt.feature.geometry.coordinates[1],pt.feature.geometry.coordinates[0]])
    .setIcon(
      L.divIcon({
        className: "eventMarker",
        iconSize:[20,20],
        popupAnchor:[-3,-10]
      })
    ).bindPopup(pt.feature.properties.name)
    .addTo(map);

  // clusters.addLayer(pt)
  //
  // marker.on("touchstart mouseover mousedown click", function(e){
  //   marker.openPopup();
  // });
  // marker.on("touchend mouseout mouseup", function(e){
  //   marker.closePopup();
  // });
});
// map.addLayer(clusters)

</script>
